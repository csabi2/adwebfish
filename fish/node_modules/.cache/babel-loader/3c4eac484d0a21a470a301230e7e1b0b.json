{"ast":null,"code":"var _jsxFileName = \"/home/wwitdtstl/Desktop/AdvancedWeb/Fishermans_log-master/fisher/src/components/LocationSelect.js\";\nimport React from \"react\";\nimport Select from 'react-select';\nimport locationStore from \"../store/Locations\";\nimport filter from \"../store/customFilter\";\n\nclass LocationSelect extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = selectedOption => {\n      filter.location = selectedOption ? selectedOption.value : '';\n    };\n\n    this.state = {\n      locations: []\n    };\n    this.onLocationChange = this.onLocationChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    locationStore.addChangeListener(this.onLocationChange);\n  }\n\n  componentWillUnmount() {\n    locationStore.removeChangeListener(this.onLocationChange);\n  }\n\n  onLocationChange() {\n    this.setState({\n      locations: locationStore._locations\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Select, {\n      onChange: this.handleChange,\n      options: locationStore._locations.map(entry => {\n        return {\n          value: entry.id,\n          label: entry.name\n        };\n      }),\n      placeholder: \"Select location\",\n      isSearchable: true,\n      isClearable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default LocationSelect;","map":{"version":3,"sources":["/home/wwitdtstl/Desktop/AdvancedWeb/Fishermans_log-master/fisher/src/components/LocationSelect.js"],"names":["React","Select","locationStore","filter","LocationSelect","Component","constructor","props","context","handleChange","selectedOption","location","value","state","locations","onLocationChange","bind","componentDidMount","addChangeListener","componentWillUnmount","removeChangeListener","setState","_locations","render","map","entry","id","label","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAEzCC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AACxB,UAAMD,KAAN,EAAaC,OAAb;;AADwB,SAwB5BC,YAxB4B,GAwBZC,cAAD,IAAoB;AAC/BP,MAAAA,MAAM,CAACQ,QAAP,GAAkBD,cAAc,GAAGA,cAAc,CAACE,KAAlB,GAA0B,EAA1D;AACH,KA1B2B;;AAExB,SAAKC,KAAL,GAAW;AACPC,MAAAA,SAAS,EAAG;AADL,KAAX;AAGA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKP,YAAL,GAAoB,KAAKA,YAAL,CAAkBO,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBf,IAAAA,aAAa,CAACgB,iBAAd,CAAgC,KAAKH,gBAArC;AACH;;AAEDI,EAAAA,oBAAoB,GAAG;AACnBjB,IAAAA,aAAa,CAACkB,oBAAd,CAAmC,KAAKL,gBAAxC;AACH;;AAEDA,EAAAA,gBAAgB,GAAG;AACf,SAAKM,QAAL,CAAc;AACVP,MAAAA,SAAS,EAAEZ,aAAa,CAACoB;AADf,KAAd;AAIH;;AAMDC,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE,KAAKd,YAAvB;AACQ,MAAA,OAAO,EAAEP,aAAa,CAACoB,UAAd,CAAyBE,GAAzB,CAA6BC,KAAK,IAAI;AAC3C,eAAO;AAACb,UAAAA,KAAK,EAAEa,KAAK,CAACC,EAAd;AAAkBC,UAAAA,KAAK,EAAEF,KAAK,CAACG;AAA/B,SAAP;AACH,OAFQ,CADjB;AAIQ,MAAA,WAAW,EAAE,iBAJrB;AAKQ,MAAA,YAAY,EAAE,IALtB;AAMQ,MAAA,WAAW,EAAE,IANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AASH;;AAxCwC;;AA2C7C,eAAexB,cAAf","sourcesContent":["import React from \"react\";\nimport Select from 'react-select';\nimport locationStore from \"../store/Locations\";\nimport filter from \"../store/customFilter\";\n\nclass LocationSelect extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state={\n            locations : [],\n        };\n        this.onLocationChange = this.onLocationChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        locationStore.addChangeListener(this.onLocationChange)\n    }\n\n    componentWillUnmount() {\n        locationStore.removeChangeListener(this.onLocationChange)\n    }\n\n    onLocationChange() {\n        this.setState({\n            locations: locationStore._locations\n        })\n\n    }\n\n    handleChange = (selectedOption) => {\n        filter.location = selectedOption ? selectedOption.value : '';\n    };\n\n    render() {\n        return (\n            <Select onChange={this.handleChange}\n                    options={locationStore._locations.map(entry => {\n                        return {value: entry.id, label: entry.name}\n                    })}\n                    placeholder={\"Select location\"}\n                    isSearchable={true}\n                    isClearable={true}/>\n        );\n    }\n}\n\nexport default LocationSelect;"]},"metadata":{},"sourceType":"module"}